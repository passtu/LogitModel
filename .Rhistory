#1.3 load data
data_customer <- fread("data_customer.csv")
data_personal <- fread("data_personal.csv")
#2.1 nerge data tables
merged_data <- merge(data_customer,data_personal,by="CustomerId")
#2.2 set columns to factors
merged_data$Exited <- as.factor(merged_data$Exited)
merged_data$Gender <- as.factor(merged_data$Gender)
#2.3 quick check on the data
str(merged_data)
summary(merged_data)
#3.1 logistig regression
logistic_regression <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance + NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary, data = merged_data, family = "binomial")
logistic_regression
#3.2 predict churn probability
merged_data$churn_prob <- predict(logistic_regression,merged_data,type = "response")
#3.3 customer with highest and lowest churn probability
merged_data[churn_prob==max(churn_prob),list(CustomerId,churn_prob)]
merged_data[churn_prob==min(churn_prob),list(CustomerId,churn_prob)]
#3.4 average churn probability
merged_data[,list(mean_churn=mean(churn_prob)),by=Gender]
library(data.table)
library(lubridate)
rm(list = ls())
library(data.table)
library(lubridate)
library(ggplot2)
library(Hmisc)
library(RSQLite)
library(DBI)
library(sparklyr)
library(leaflet)
library(shiny)
library(shinythemes)
library(DT)
library(grid)
library(gridExtra)
library(dplyr)
library(profvis)
library(microbenchmark)
library(readr)
library(fastmatch)
library(compiler)
library(doParallel)
library(foreach)
#1.1 working directory
setwd("C:/Users/pasca/Dropbox/UZH/FS21/R/Day 5")
#1.2 load packages
library(data.table)
library(lubridate)
#1.3 load data
data_customer <- fread("data_customer.csv")
data_personal <- fread("data_personal.csv")
#2.1 nerge data tables
merged_data <- merge(data_customer,data_personal,by="CustomerId")
#2.2 set columns to factors
merged_data$Exited <- as.factor(merged_data$Exited)
merged_data$Gender <- as.factor(merged_data$Gender)
#2.3 quick check on the data
str(merged_data)
summary(merged_data)
#3.1 logistig regression
logistic_regression <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance + NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary, data = merged_data, family = "binomial")
logistic_regression
#3.2 predict churn probability
merged_data$churn_prob <- predict(logistic_regression,merged_data,type = "response")
#3.3 customer with highest and lowest churn probability
merged_data[churn_prob==max(churn_prob),list(CustomerId,churn_prob)]
merged_data[churn_prob==min(churn_prob),list(CustomerId,churn_prob)]
#3.4 average churn probability
merged_data[,list(mean_churn=mean(churn_prob)),by=Gender]
#4.1 create a function
churn_prob_function <- function(x, y){
merged_data <- x
CustID <- y
logistic_regression <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance + NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary, data = merged_data, family = "binomial")
merged_data$churn_prob <- predict(logistic_regression,merged_data,type = "response")
result <- merged_data[CustomerId==CustID,list(CustomerId,churn_prob)]
return(result)
}
churn_prob_function(merged_data,15662641)
#4.2 check if ID exists
churn_prob_function <- function(x, y){
merged_data <- x
CustID <- y
if(CustID %in% merged_data$CustomerID){
logistic_regression <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance + NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary, data = merged_data, family = "binomial")
merged_data$churn_prob <- predict(logistic_regression,merged_data,type = "response")
result <- merged_data[CustomerId==CustID,list(CustomerId,churn_prob)]
return(result)
} else {
print("Error")
}
}
churn_prob_function(merged_data,15662641)
churn_prob_function(merged_data,00000000)
View(merged_data)
churn_prob_function <- function(x, y){
merged_data <- x
CustID <- y
if(CustID %in% merged_data$CustomerId){
logistic_regression <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance + NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary, data = merged_data, family = "binomial")
merged_data$churn_prob <- predict(logistic_regression,merged_data,type = "response")
result <- merged_data[CustomerId==CustID,list(CustomerId,churn_prob)]
return(result)
} else {
print("Error")
}
}
churn_prob_function(merged_data,15662641)
churn_prob_function(merged_data,00000000)
